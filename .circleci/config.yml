jobs:
  test:
    docker:
      - image: circleci/python:3.6.1
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pip install -e .

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run pylama!
      - run:
          name: run pylama
          command: |
            . venv/bin/activate
            pylama labstep/ examples/

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      # - run:
      #     name: run tests
      #     command: |
      #       . venv/bin/activate
      #       pytest tests/

      - store_artifacts:
          path: test-reports
          destination: test-reports

  build:
    docker:
      - image: circleci/python:3.6.1      
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pip install twine
            pip install -e .

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # - run:
      #   name: verify git tag vs. version
      #   command: |
      #     python3 -m venv venv
      #     . venv/bin/activate
      #     python setup.py verify

      - run:
          name: build dist
          command: |
            . venv/bin/activate
            # create a source distribution
            python setup.py sdist

      - run:
          name: deploy
          environment: 
            TWINE_USERNAME: "__token__"
          command: |
            . venv/bin/activate
            export TWINE_PASSWORD=$TWINE_TEST_PASSWORD 
            env
            twine upload -r testpypi dist/*
              
workflows:
  version: 2
  test_build:
    jobs:
      - test
      - build:
          requires: [test]
          filters:
            branches:
              only: devops/publish-to-pypi